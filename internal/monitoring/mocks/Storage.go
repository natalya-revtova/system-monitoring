// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	models "github.com/natalya-revtova/system-monitoring/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Get provides a mock function with given fields: name, n
func (_m *Storage) Get(name string, n int) ([]models.Metrics, bool) {
	ret := _m.Called(name, n)

	var r0 []models.Metrics
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, int) ([]models.Metrics, bool)); ok {
		return rf(name, n)
	}
	if rf, ok := ret.Get(0).(func(string, int) []models.Metrics); ok {
		r0 = rf(name, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) bool); ok {
		r1 = rf(name, n)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Save provides a mock function with given fields: metrics
func (_m *Storage) Save(metrics models.Metrics) {
	_m.Called(metrics)
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
